// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// KafkaAdminClient is an autogenerated mock type for the KafkaAdminClient type
type KafkaAdminClient struct {
	mock.Mock
}

// AlterPartitionReassignments provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) AlterPartitionReassignments(ctx context.Context, req *kafka.AlterPartitionReassignmentsRequest) (*kafka.AlterPartitionReassignmentsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.AlterPartitionReassignmentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.AlterPartitionReassignmentsRequest) (*kafka.AlterPartitionReassignmentsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.AlterPartitionReassignmentsRequest) *kafka.AlterPartitionReassignmentsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.AlterPartitionReassignmentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.AlterPartitionReassignmentsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartitions provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) CreatePartitions(ctx context.Context, req *kafka.CreatePartitionsRequest) (*kafka.CreatePartitionsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.CreatePartitionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.CreatePartitionsRequest) (*kafka.CreatePartitionsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.CreatePartitionsRequest) *kafka.CreatePartitionsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.CreatePartitionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.CreatePartitionsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopics provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) CreateTopics(ctx context.Context, req *kafka.CreateTopicsRequest) (*kafka.CreateTopicsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.CreateTopicsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.CreateTopicsRequest) (*kafka.CreateTopicsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.CreateTopicsRequest) *kafka.CreateTopicsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.CreateTopicsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.CreateTopicsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElectLeaders provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) ElectLeaders(ctx context.Context, req *kafka.ElectLeadersRequest) (*kafka.ElectLeadersResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.ElectLeadersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.ElectLeadersRequest) (*kafka.ElectLeadersResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.ElectLeadersRequest) *kafka.ElectLeadersResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.ElectLeadersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.ElectLeadersRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementalAlterConfigs provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) IncrementalAlterConfigs(ctx context.Context, req *kafka.IncrementalAlterConfigsRequest) (*kafka.IncrementalAlterConfigsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.IncrementalAlterConfigsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.IncrementalAlterConfigsRequest) (*kafka.IncrementalAlterConfigsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.IncrementalAlterConfigsRequest) *kafka.IncrementalAlterConfigsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.IncrementalAlterConfigsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.IncrementalAlterConfigsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Metadata provides a mock function with given fields: ctx, req
func (_m *KafkaAdminClient) Metadata(ctx context.Context, req *kafka.MetadataRequest) (*kafka.MetadataResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *kafka.MetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.MetadataRequest) (*kafka.MetadataResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kafka.MetadataRequest) *kafka.MetadataResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.MetadataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kafka.MetadataRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKafkaAdminClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewKafkaAdminClient creates a new instance of KafkaAdminClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaAdminClient(t mockConstructorTestingTNewKafkaAdminClient) *KafkaAdminClient {
	mock := &KafkaAdminClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
