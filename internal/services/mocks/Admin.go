// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/pecigonzalo/kafka-canary/internal/client"

	mock "github.com/stretchr/testify/mock"
)

// Admin is an autogenerated mock type for the Admin type
type Admin struct {
	mock.Mock
}

// AddPartitions provides a mock function with given fields: ctx, name, assignments
func (_m *Admin) AddPartitions(ctx context.Context, name string, assignments []client.PartitionAssignment) error {
	ret := _m.Called(ctx, name, assignments)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.PartitionAssignment) error); ok {
		r0 = rf(ctx, name, assignments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AssignPartitions provides a mock function with given fields: ctx, name, assignments
func (_m *Admin) AssignPartitions(ctx context.Context, name string, assignments []client.PartitionAssignment) error {
	ret := _m.Called(ctx, name, assignments)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.PartitionAssignment) error); ok {
		r0 = rf(ctx, name, assignments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTopic provides a mock function with given fields: ctx, name, assignments, configs
func (_m *Admin) CreateTopic(ctx context.Context, name string, assignments []client.PartitionAssignment, configs map[string]string) error {
	ret := _m.Called(ctx, name, assignments, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []client.PartitionAssignment, map[string]string) error); ok {
		r0 = rf(ctx, name, assignments, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBrokers provides a mock function with given fields: ctx
func (_m *Admin) GetBrokers(ctx context.Context) ([]client.BrokerInfo, error) {
	ret := _m.Called(ctx)

	var r0 []client.BrokerInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]client.BrokerInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []client.BrokerInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.BrokerInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopic provides a mock function with given fields: ctx, name
func (_m *Admin) GetTopic(ctx context.Context, name string) (client.TopicInfo, error) {
	ret := _m.Called(ctx, name)

	var r0 client.TopicInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (client.TopicInfo, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) client.TopicInfo); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(client.TopicInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunLeaderElection provides a mock function with given fields: ctx, name, partitions
func (_m *Admin) RunLeaderElection(ctx context.Context, name string, partitions []int) error {
	ret := _m.Called(ctx, name, partitions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []int) error); ok {
		r0 = rf(ctx, name, partitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopicConfig provides a mock function with given fields: ctx, name, configs
func (_m *Admin) UpdateTopicConfig(ctx context.Context, name string, configs map[string]string) error {
	ret := _m.Called(ctx, name, configs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, name, configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAdmin interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdmin creates a new instance of Admin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdmin(t mockConstructorTestingTNewAdmin) *Admin {
	mock := &Admin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
